{"version":3,"sources":["js/refs.js","js/task1.js","js/task2.js","js/task3.js","index.js"],"names":["task1Btn","document","querySelector","task2Btn","task3Btn","addEventListener","onClickBtn1","delay","ms","Promise","resolve","setTimeout","logger","time","console","log","clear","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","onClickBtn2","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","logError","warn","onClickBtn3","amount","catch"],"mappings":"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","file":"src.c08569c1.js","sourceRoot":"../src","sourcesContent":["export const task1Btn=document.querySelector('.task1-js');\nexport const task2Btn=document.querySelector('.task2-js');\nexport const task3Btn=document.querySelector('.task3-js');","// Задание 1\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд. Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\n\nimport {task1Btn} from './refs';\n\ntask1Btn.addEventListener('click', onClickBtn1);\n\nconst delay = ms => {\n  return new Promise( (resolve) => {\n      setTimeout(() => {\n          resolve(ms)\n      },ms)\n  }\n\n  )\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\nfunction onClickBtn1 () {\n    console.clear();\n    delay(2000).then(logger); // Resolved after 2000ms\n    delay(1000).then(logger); // Resolved after 1000ms\n    delay(1500).then(logger); // Resolved after 1500ms\n    delay(5000).then(logger); // Resolved after 5000ms\n}","// Задание 2\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, а принимала всего два параметра allUsers и userName и возвращала промис.\n\nimport {task2Btn} from './refs';\n\nconst users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n  ];\n  \n  const toggleUserState = (allUsers, userName) => {\n      return new Promise( resolve => {\n        const updatedUsers = allUsers.map(user =>\n        user.name === userName ? { ...user, active: !user.active } : user);\n        resolve(updatedUsers);}\n    );\n    // const updatedUsers = allUsers.map(user =>\n    //     user.name === userName ? { ...user, active: !user.active } : user );\n    //     return Promise.resolve(updatedUsers);\n  };\n  \nconst logger = updatedUsers => console.table(updatedUsers);\n  \nconst onClickBtn2 = () => {\n    console.clear();\n    toggleUserState(users, 'Mango').then(logger);\n    toggleUserState(users, 'Lux').then(logger);\n};\n\ntask2Btn.addEventListener('click', onClickBtn2);\n\n\n","// Задание 3\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.\n\n\nimport {task3Btn} from './refs';\n\nconst randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n  \nconst makeTransaction = (transaction) => {\n    const delay = randomIntegerFromInterval(200, 500);\n    \n    return new Promise ( (resolve,reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n       if (canProcess) {\n        resolve({id: transaction.id, time: delay});\n      } else {\n        reject(transaction.id);\n      }\n    },  delay)\n    })\n  }\n  \n  const logSuccess = ({id, time}) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n  };\n  \n  const logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n  };\n  \nconst onClickBtn3 = () => {\n    console.clear();\n\n    makeTransaction({ id: 70, amount: 150 })\n        .then(logSuccess)\n        .catch(logError);\n    \n    makeTransaction({ id: 71, amount: 230 })\n        .then(logSuccess)\n        .catch(logError);\n    \n    makeTransaction({ id: 72, amount: 75 })\n        .then(logSuccess)\n        .catch(logError);\n    \n    makeTransaction({ id: 73, amount: 100 })\n        .then(logSuccess)\n        .catch(logError);\n}\n\ntask3Btn.addEventListener('click', onClickBtn3);","import './sass/main.scss';\nimport './js/task1';\nimport './js/task2';\nimport './js/task3';\n\n"]}